'use strict';

let ask2FA = (() => {
  var _ref = _asyncToGenerator(function* () {
    return (yield inquirer.prompt([{
      type: 'input',
      name: 'code',
      message: 'What is your GitHub two-factor authentication code?',
      validate: validator.isNumeric
    }])).code;
  });

  return function ask2FA() {
    return _ref.apply(this, arguments);
  };
})();

let createAuthorization = (() => {
  var _ref2 = _asyncToGenerator(function* (info) {
    const reponame = info.ghrepo && info.ghrepo.slug[1];
    const node = (reponame ? `-${reponame}-` : '-') + randomId();

    try {
      var response = yield request({
        method: 'POST',
        url: `${info.github.endpoint}/authorizations`,
        json: true,
        auth: info.github,
        headers: {
          'User-Agent': 'semantic-release',
          'X-GitHub-OTP': info.github.code
        },
        body: {
          scopes: ['repo', 'read:org', 'user:email', 'repo_deployment', 'repo:status', 'write:repo_hook'],
          note: `semantic-release${node}`
        }
      });
    } catch (e) {
      if (e.statusCode === 401 && e.response.headers['x-github-otp']) {
        const type = e.response.headers['x-github-otp'].split('; ')[1];

        if (info.github.retry) log.warn('Invalid two-factor authentication code.');else log.info(`Two-factor authentication code needed via ${type}.`);

        const code = yield ask2FA();
        info.github.code = code;
        info.github.retry = true;
        return yield createAuthorization(info);
      }
      throw e;
    }

    if (response.statusCode === 201) return response.body.token;
  });

  return function createAuthorization(_x) {
    return _ref2.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const crypto = require('crypto');

const _ = require('lodash');
const base32 = require('base32');
const inquirer = require('inquirer');
const npm = require('npm');
const request = require('request-promise').defaults({ resolveWithFullResponse: true });
const validator = require('validator');
const log = require('npmlog');
const gitConfigPath = require('git-config-path')('global');
const parse = require('parse-git-config');
const passwordStorage = require('./password-storage')('github');

function randomId() {
  return base32.encode(crypto.randomBytes(4));
}

module.exports = (() => {
  var _ref3 = _asyncToGenerator(function* (pkg, info) {
    if (_.has(info.options, 'gh-token')) {
      info.github = {
        endpoint: info.ghepurl || 'https://api.github.com',
        token: info.options['gh-token']
      };
      log.info('Using GitHub token from command line argument.');
      return;
    }

    const githubUserFromGitConfig = parse.sync({ path: gitConfigPath }).github ? parse.sync({ path: gitConfigPath }).github.user : null;

    const answers = yield inquirer.prompt([{
      type: 'input',
      name: 'username',
      message: 'What is your GitHub username?',
      default: info.options['gh-username'] || githubUserFromGitConfig || npm.config.get('username'),
      validate: _.ary(_.bind(validator.isLength, validator, _, 1), 1)
    }, {
      type: 'password',
      name: 'password',
      message: 'What is your GitHub password?',
      validate: _.ary(_.bind(validator.isLength, validator, _, 1), 1),
      when: function when(answers) {
        return !info.options.keychain || info.options['ask-for-passwords'] || !passwordStorage.get(answers.username);
      }
    }]);

    answers.password = answers.password || passwordStorage.get(answers.username);

    info.github = answers;
    info.github.endpoint = info.ghepurl || 'https://api.github.com';

    const token = yield createAuthorization(info);

    if (!token) throw new Error('Could not login to GitHub.');

    if (info.options.keychain) {
      passwordStorage.set(info.github.username, info.github.password);
    }

    info.github.token = token;
    log.info('Successfully created GitHub token.');
  });

  return function (_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
})();