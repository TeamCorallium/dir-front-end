'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const _ = require('lodash');
const inquirer = require('inquirer');
const validator = require('validator');

const travis = require('./travis');

const cis = {
  'Travis CI': travis.bind(null, 'https://api.travis-ci.org'),
  'Travis CI Pro': travis.bind(null, 'https://api.travis-ci.com'),
  'Travis CI Enterprise': travis,
  'Other (prints tokens)': (pkg, info) => {
    const message = `
${_.repeat('-', 46)}
GH_TOKEN=${info.github.token}
NPM_TOKEN=${info.npm.token}
${_.repeat('-', 46)}
`;
    console.log(message);
  }
};

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (pkg, info) {
    const choices = _.keys(cis);

    const answers = yield inquirer.prompt([{
      type: 'list',
      name: 'ci',
      message: 'What CI are you using?',
      choices: choices,
      default: info.ghrepo && info.ghrepo.private ? 1 : 0
    }, {
      type: 'input',
      name: 'endpoint',
      message: 'What is your Travis CI enterprise url?',
      validate: _.bind(validator.isURL, null, _, {
        protocols: ['http', 'https'],
        require_protocol: true
      }),
      when: function when(answers) {
        return answers.ci === choices[2];
      }
    }]);

    yield cis[answers.ci].apply(null, _.compact([answers.endpoint, pkg, info]));
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();