'use strict';

let getRemoteUrl = (() => {
  var _ref = _asyncToGenerator(function* (_ref2) {
    let repository = _ref2.repository;

    if (!repository || !repository.url) {
      const gitConfig = ini.decode(readFileSync('./.git/config', 'utf8'));
      const repo = gitConfig['remote "origin"'].url;
      if (!repo) throw new Error('No repository found.');
      repository = { type: 'git', url: `${ghUrl(repo)}.git` };
    }

    let parsed = url.parse(repository.url);
    parsed.auth = null;
    parsed.protocol = 'https';
    repository.url = url.format(parsed);

    return repository.url;
  });

  return function getRemoteUrl(_x) {
    return _ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('fs');

const readFileSync = _require.readFileSync;

const url = require('url');

const _ = require('lodash');
const ghUrl = require('github-url-from-git');
const ini = require('ini');
const inquirer = require('inquirer');
const parseGhUrl = require('parse-github-repo-url');
const request = require('request-promise').defaults({ resolveWithFullResponse: true });
const validator = require('validator');
const log = require('npmlog');

module.exports = (() => {
  var _ref3 = _asyncToGenerator(function* (pkg, info) {
    try {
      var repoUrl = yield getRemoteUrl(pkg);
    } catch (e) {
      log.error('Could not get repository url. Please create/add the repository.');
      throw e;
    }

    log.verbose(`Detected git url: ${repoUrl}`);
    info.giturl = repoUrl;
    const parsedUrl = parseGhUrl(repoUrl);

    if (!parsedUrl) {
      log.info('Not a reqular GitHub URL.');
      const eurl = url.parse(repoUrl);
      delete eurl.pathname;
      delete eurl.search;
      delete eurl.query;
      delete eurl.hash;

      const answers = yield inquirer.prompt([{
        type: 'confirm',
        name: 'enterprise',
        message: 'Are you using GitHub Enterprise?',
        default: true
      }, {
        type: 'input',
        name: 'url',
        message: 'What is your GitHub Enterprise url?',
        default: url.format(eurl),
        when: _.bind(_.get, null, _, 'enterprise'),
        validate: _.bind(validator.isURL, null, _, {
          protocols: ['http', 'https'],
          require_protocol: true
        })
      }]);
      info.ghepurl = answers.url;
      return;
    }

    info.ghrepo = { slug: parsedUrl };

    try {
      yield request.head(repoUrl);
    } catch (e) {
      const answers = yield inquirer.prompt([{
        type: 'confirm',
        name: 'private',
        message: 'Is the GitHub repository private?',
        default: false
      }]);
      _.assign(info.ghrepo, answers);
      if (answers.private) return;
      throw new Error('Could not access GitHub repository');
    }
  });

  return function (_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
})();