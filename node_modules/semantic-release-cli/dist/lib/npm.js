'use strict';

let getNpmToken = (() => {
  var _ref = _asyncToGenerator(function* (_ref2) {
    let npm = _ref2.npm,
        options = _ref2.options;

    const client = new RegClient({ log: log });

    const body = {
      _id: `org.couchdb.user:${npm.username}`,
      name: npm.username,
      password: npm.password,
      type: 'user',
      roles: [],
      date: new Date().toISOString()
    };

    const uri = url.resolve(npm.registry, '-/user/org.couchdb.user:' + encodeURIComponent(npm.username));

    var _ref3 = yield promisify(client.request.bind(client, uri))({ method: 'PUT', body: body });

    const token = _ref3.token;


    if (!token) throw new Error('Could not login to GitHub.');

    if (options.keychain) {
      passwordStorage.set(npm.username, npm.password);
    }
    npm.token = token;
    log.info('Successfully created npm token.');
  });

  return function getNpmToken(_x) {
    return _ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const url = require('url');

const _ = require('lodash');

var _require = require('bluebird');

const promisify = _require.promisify;

const inquirer = require('inquirer');
const npm = require('npm');
const RegClient = require('npm-registry-client');
const validator = require('validator');
const log = require('npmlog');

const passwordStorage = require('./password-storage')('npm');

module.exports = (() => {
  var _ref4 = _asyncToGenerator(function* (pkg, info) {
    info.npm = yield inquirer.prompt([{
      type: 'input',
      name: 'registry',
      message: 'What is your npm registry?',
      default: npm.config.get('registry'),
      validate: _.bind(validator.isURL, null, _, {
        protocols: ['http', 'https'],
        require_protocol: true
      })
    }, {
      type: 'input',
      name: 'username',
      message: 'What is your npm username?',
      default: info.options['npm-username'] || npm.config.get('username'),
      validate: _.ary(_.bind(validator.isLength, null, _, 1), 1),
      when: function when() {
        return !_.has(info.options, 'npm-token');
      }
    }, {
      type: 'password',
      name: 'password',
      message: 'What is your npm password?',
      validate: _.ary(_.bind(validator.isLength, null, _, 1), 1),
      when: function when(answers) {
        if (_.has(info.options, 'npm-token')) return false;
        return !info.options.keychain || info.options['ask-for-passwords'] || !passwordStorage.get(answers.username);
      }
    }]);

    if (_.has(info.options, 'npm-token')) {
      info.npm.token = info.options['npm-token'];
      log.info('Using npm token from command line argument.');
      return;
    }

    info.npm.password = info.npm.password || passwordStorage.get(info.npm.username);

    yield getNpmToken(info);
  });

  return function (_x2, _x3) {
    return _ref4.apply(this, arguments);
  };
})();